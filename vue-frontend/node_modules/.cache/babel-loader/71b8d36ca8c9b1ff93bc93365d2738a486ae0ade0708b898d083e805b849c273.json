{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  style: {\n    \"display\": \"flex\",\n    \"justify-content\": \"center\"\n  }\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"input_username\"\n}, \"Usuario: \", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"input_password\"\n}, \"Constrasenia: \", -1 /* HOISTED */);\nconst _hoisted_4 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_5 = {\n  key: 1,\n  class: \"error-message\"\n};\nconst _hoisted_6 = {\n  key: 2,\n  id: \"label_token\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Contenedor flex que centra todos los elementos hijo en él \"), !$data.requestComplete ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Botón que llama a la función \\\"getTokens\\\" cuando se hace clic \"), _createElementVNode(\"button\", {\n    id: \"id_button_token\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.getTokens && $options.getTokens(...args)),\n    class: \"btn btn-primary\"\n  }, \"Solicitar Token\"), _createCommentVNode(\" Etiqueta y campo de entrada para el nombre de usuario \"), _hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"input_username\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.username = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.username]]), _createCommentVNode(\" Etiqueta y campo de entrada para la contraseña \"), _hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"input_password\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.password = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]]), _createCommentVNode(\" Muestra el mensaje de error si los campos están vacíos \"), !$data.username || !$data.password ? (_openBlock(), _createElementBlock(\"p\", _hoisted_4, \"Los campos de usuario y contraseña son obligatorios\")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Muestra el mensaje de error si la solicitud falló \"), $data.error ? (_openBlock(), _createElementBlock(\"p\", _hoisted_5, _toDisplayString($data.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Etiqueta que muestra el token recibido \"), $data.requestComplete ? (_openBlock(), _createElementBlock(\"label\", _hoisted_6, _toDisplayString($data.token), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;EAEOA,KAA+C,EAA/C;IAAA;IAAA;EAAA;;gCAKHC,oBAA6C;EAAtCC,GAAG,EAAC;AAAgB,GAAC,WAAS;gCAIrCD,oBAAkD;EAA3CC,GAAG,EAAC;AAAgB,GAAC,gBAAc;;;EAITC,KAAK,EAAC;;;;EAKrBA,KAAK,EAAC;;;;EAGnBC,EAAE,EAAC;;;6DAtBVC,kFAAkE,GACNC,qBAAe,kBAA3EC,oBAeM,OAfNC,UAeM,GAdJH,uFAAqE,EACrEJ,oBAAgG;IAAxFG,EAAE,EAAC,iBAAiB;IAAEK,OAAK,yCAAEC,iDAAS;IAAEP,KAAK,EAAC;KAAkB,iBAAe,GAEvFE,8EAA8D,EAC9DM,UAA6C,kBAC7CV,oBAA0D;IAAnDW,IAAI,EAAC,MAAM;IAACR,EAAE,EAAC,gBAAgB;+DAAUE,cAAQ;iDAARA,cAAQ,KAExDD,uEAAuD,EACvDQ,UAAkD,kBAClDZ,oBAA8D;IAAvDW,IAAI,EAAC,UAAU;IAACR,EAAE,EAAC,gBAAgB;+DAAUE,cAAQ;iDAARA,cAAQ,KAE5DD,+EAA+D,GACrDC,cAAQ,KAAKA,cAAQ,kBAA/BC,oBAA8G,KAA9GO,UAA8G,EAAvD,qDAAmD,+EAIxGT,0EAA0D,EACjDC,WAAK,kBAAdC,oBAAqD,KAArDQ,UAAqD,mBAAZT,WAAK,uDAElDD,+DAA+C,EACjBC,qBAAe,kBAA7CC,oBAAkE,SAAlES,UAAkE,mBAAhBV,WAAK","names":["style","_createElementVNode","for","class","id","_createCommentVNode","$data","_createElementBlock","_hoisted_1","onClick","$options","_hoisted_2","type","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6"],"sourceRoot":"","sources":["/home/nicolas/Downloads/repos/Iw3-FInal/vue-frontend/src/components/Token.vue"],"sourcesContent":["<template>\n  <!-- Contenedor flex que centra todos los elementos hijo en él -->\n  <div style=\"display: flex; justify-content: center;\" v-if=\"!requestComplete\">\n    <!-- Botón que llama a la función \"getTokens\" cuando se hace clic -->\n    <button id=\"id_button_token\" @click=\"getTokens\" class=\"btn btn-primary\">Solicitar Token</button>\n\n    <!-- Etiqueta y campo de entrada para el nombre de usuario -->\n    <label for=\"input_username\">Usuario: </label>\n    <input type=\"text\" id=\"input_username\" v-model=\"username\">\n\n    <!-- Etiqueta y campo de entrada para la contraseña -->\n    <label for=\"input_password\">Constrasenia: </label>\n    <input type=\"password\" id=\"input_password\" v-model=\"password\">\n\n    <!-- Muestra el mensaje de error si los campos están vacíos -->\n    <p v-if=\"!username || !password\" class=\"error-message\">Los campos de usuario y contraseña son obligatorios</p>\n\n  </div>\n\n      <!-- Muestra el mensaje de error si la solicitud falló -->\n      <p v-if=\"error\" class=\"error-message\">{{ error }}</p>\n\n  <!-- Etiqueta que muestra el token recibido -->\n  <label id=\"label_token\" v-if=\"requestComplete\">{{ token }}</label>\n\n</template>\n\n<script>\n// Importar el servicio de token\nimport TokenService from '@/services/TokenService'\n\nexport default {\n  name: '',\n\n  // Propiedades de datos\n  data() {\n    return {\n      username: '',\n      password: '',\n      token: \"\",\n      requestComplete: false,\n      error: null // Inicializar la propiedad \"error\" en \"null\"\n\n    }\n  },\n  // Funciones\n  methods: {\n    async getTokens() {\n      try {\n        // Llamar al método \"getTokens\" del servicio de token, pasando el nombre de usuario y la contraseña como parámetros\n        const token = await TokenService.getTokens(this.username, this.password).token;\n\n        this.token = token;\n\n        this.requestComplete = true;\n      } catch (error) {\n        this.error = error;\n\n        console.error(error);\n      }\n    }\n  }\n};\n\n</script>\n\n<style>\n#id_button_token {\n  display: flex;\n  justify-content: center;\n}\n\n#label_token {\n  display: block;\n  margin-top: 50px;\n  border: 1px solid black;\n  content: \"Token:\";\n}\n\n.error-message {\n  color: red;\n\n  border: 1px solid rgb(255, 0, 0);\n  display: block;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}