{"ast":null,"code":"// Importar el servicio de token\nimport TokenService from '@/services/TokenService';\nexport default {\n  name: '',\n  // Propiedades de datos\n  data() {\n    return {\n      username: '',\n      password: '',\n      token: '',\n      requestComplete: false,\n      error: null // Inicializar la propiedad \"error\" en \"null\"\n    };\n  },\n\n  // Funciones\n  methods: {\n    // Obtener un token de autenticación\n    async getTokens() {\n      try {\n        // Llamar al método \"getTokens\" del servicio de token, pasando el nombre de usuario y la contraseña como parámetros\n        const token = await TokenService.getTokens(this.username, this.password);\n        this.token = token;\n        this.requestComplete = true;\n      } catch (error) {\n        this.error = error;\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAwBA;AACA,OAAOA,YAAW,MAAO,yBAAwB;AAEjD,eAAe;EACXC,IAAI,EAAE,EAAE;EAER;EACAC,IAAI,GAAG;IACH,OAAO;MACHC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,eAAe,EAAE,KAAK;MACtBC,KAAK,EAAE,IAAG,CAAE;IAEhB;EACJ,CAAC;;EACD;EACAC,OAAO,EAAE;IACT;IACA,MAAMC,SAAS,GAAG;MAChB,IAAI;QACF;QACA,MAAMJ,KAAI,GAAI,MAAML,YAAY,CAACS,SAAS,CAAC,IAAI,CAACN,QAAQ,EAAE,IAAI,CAACC,QAAQ,CAAC;QAExE,IAAI,CAACC,KAAI,GAAIA,KAAK;QAElB,IAAI,CAACC,eAAc,GAAI,IAAI;MAC7B,EAAE,OAAOC,KAAK,EAAE;QACd,IAAI,CAACA,KAAI,GAAIA,KAAK;QAElBG,OAAO,CAACH,KAAK,CAACA,KAAK,CAAC;MACtB;IACF;EACF;AACF,CAAC","names":["TokenService","name","data","username","password","token","requestComplete","error","methods","getTokens","console"],"sourceRoot":"","sources":["/home/nicolas/Downloads/repos/Iw3-FInal/vue-frontend/src/components/Token.vue"],"sourcesContent":["<template>\n    <!-- Contenedor flex que centra todos los elementos hijo en él -->\n    <div style=\"display: flex; justify-content: center;\" v-if=\"!requestComplete\">\n        <!-- Botón que llama a la función \"getTokens\" cuando se hace clic -->\n        <button id=\"id_button_token\" @click=\"getTokens\" class=\"btn btn-primary\">Solicitar Token</button>\n\n        <!-- Etiqueta y campo de entrada para el nombre de usuario -->\n        <label for=\"input_username\">Usuario: </label>\n        <input type=\"text\" id=\"input_username\" v-model=\"username\">\n\n        <!-- Etiqueta y campo de entrada para la contraseña -->\n        <label for=\"input_password\">Constrasenia: </label>\n        <input type=\"text\" id=\"input_password\" v-model=\"password\">\n\n        <!-- Muestra el mensaje de error si la solicitud falló -->\n        <p v-if=\"error\" class=\"error-message\">La solicitud falló con el código de estado {{ error }}</p>\n    </div>\n\n    <!-- Etiqueta que muestra el token recibido -->\n    <label id=\"label_token\" v-if=\"requestComplete\">{{ token }}</label>\n\n</template>\n\n<script>\n// Importar el servicio de token\nimport TokenService from '@/services/TokenService'\n\nexport default {\n    name: '',\n\n    // Propiedades de datos\n    data() {\n        return {\n            username: '',\n            password: '',\n            token: '',\n            requestComplete: false,\n            error: null // Inicializar la propiedad \"error\" en \"null\"\n\n        }\n    },\n    // Funciones\n    methods: {\n    // Obtener un token de autenticación\n    async getTokens() {\n      try {\n        // Llamar al método \"getTokens\" del servicio de token, pasando el nombre de usuario y la contraseña como parámetros\n        const token = await TokenService.getTokens(this.username, this.password);\n        \n        this.token = token;\n\n        this.requestComplete = true;\n      } catch (error) {\n        this.error = error;\n\n        console.error(error);\n      }\n    }\n  }\n};\n\n</script>\n\n<style>\n#id_button_token {\n    display: flex;\n    justify-content: center;\n}\n\n#label_token {\n    display: block;\n    margin-top: 50px;\n    border: 1px solid black;\n    content: \"Token:\";\n}\n\n.error-message {\n    color: red;\n\n    border: 1px solid rgb(255, 0, 0);\n    display: block;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}