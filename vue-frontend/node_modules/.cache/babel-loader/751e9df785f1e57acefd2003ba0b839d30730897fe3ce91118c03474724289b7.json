{"ast":null,"code":"import ChoferService from '@/services/ChoferService';\nexport default {\n  name: '',\n  data() {\n    return {\n      choferes: [],\n      token: '',\n      requestComplete: false,\n      search: ''\n    };\n  },\n  computed: {\n    async filteredChoferes() {\n      try {\n        this.choferes = await ChoferService.getChoferes(this.token);\n        return choferes.filter(chofer => chofer.nombre.toLowerCase().includes(this.search.toLowerCase()));\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  },\n  methods: {\n    async getChoferes() {\n      try {\n        // Obtener un token llamando al método \"getTokens\" importado\n\n        // Llamar al método \"getCamiones\" del servicio de camión, pasando el token como un parámetro\n        this.choferes = await ChoferService.getChoferes(this.token);\n        console.log(this.choferes);\n        this.requestComplete = true;\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n  // created(){\n  //      this.getCamiones()\n  // }\n};","map":{"version":3,"mappings":"AA6BA,OAAOA,aAAY,MAAO,0BAA0B;AAEpD,eAAe;EACXC,IAAI,EAAE,EAAE;EACRC,IAAI,GAAG;IACH,OAAO;MACHC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,eAAe,EAAE,KAAK;MACtBC,MAAM,EAAE;IACZ;EACJ,CAAC;EACDC,QAAQ,EAAE;IACV,MAAMC,gBAAgB,GAAG;MACrB,IAAI;QACA,IAAI,CAACL,QAAO,GAAI,MAAMH,aAAa,CAACS,WAAW,CAAC,IAAI,CAACL,KAAK,CAAC;QAC3D,OAAOD,QAAQ,CAACO,MAAM,CAACC,MAAK,IAAKA,MAAM,CAACC,MAAM,CAACC,WAAW,EAAE,CAACC,QAAQ,CAAC,IAAI,CAACR,MAAM,CAACO,WAAW,EAAE,CAAC,CAAC;MACrG,EAAE,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACxB;IACJ;EACJ,CAAC;EAEGE,OAAO,EAAE;IAEL,MAAMR,WAAW,GAAG;MAChB,IAAI;QACA;;QAEA;QACA,IAAI,CAACN,QAAO,GAAI,MAAMH,aAAa,CAACS,WAAW,CAAC,IAAI,CAACL,KAAK,CAAC;QAC3DY,OAAO,CAACE,GAAG,CAAC,IAAI,CAACf,QAAQ,CAAC;QAC1B,IAAI,CAACE,eAAc,GAAI,IAAI;MAC/B,EAAE,OAAOU,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACxB;IACJ;EACJ;EACA;EACA;EACA;AAEJ","names":["ChoferService","name","data","choferes","token","requestComplete","search","computed","filteredChoferes","getChoferes","filter","chofer","nombre","toLowerCase","includes","error","console","methods","log"],"sourceRoot":"","sources":["/home/nicolas/Downloads/repos/Iw3-FInal/vue-frontend/src/components/Chofer.vue"],"sourcesContent":["<template>\n    <input id=\"input_token\" type=\"text\" v-model=\"token\" v-if=\"!requestComplete\" />\n    <button id=\"id_button_choferes\" @click=\"getChoferes\" v-if=\"!requestComplete\">\n        Get choferes\n    </button>\n\n    <div class=\"container\" v-if=\"choferes.length > 0\">\n        <h1 class=\"text-center mb-3\"> Lista de Choferes</h1>\n\n        <table class=\"table table-striped table-bordered\">\n            <thead>\n                <th>Chofer ID</th>\n                <th>Chofer Nombre</th>\n                <th>Chofer Apellido</th>\n                <th>Chofer Documento</th>\n            </thead>\n            <tbody>\n                <tr v-for=\"chofer in choferes\" v-bind:key=\"chofer.id\">\n                    <td> {{ chofer.id }} </td>\n                    <td> {{ chofer.nombre }} </td>\n                    <td> {{ chofer.apellido }} </td>\n                    <td> {{ chofer.documento }} </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</template>\n<script>\n\nimport ChoferService from '@/services/ChoferService';\n\nexport default {\n    name: '',\n    data() {\n        return {\n            choferes: [],\n            token: '',\n            requestComplete: false,\n            search: '',\n        }\n    },\n    computed: {\n    async filteredChoferes() {\n        try {\n            this.choferes = await ChoferService.getChoferes(this.token);\n            return choferes.filter(chofer => chofer.nombre.toLowerCase().includes(this.search.toLowerCase()));\n        } catch (error) {\n            console.error(error);\n        }\n    },\n},\n\n    methods: {\n\n        async getChoferes() {\n            try {\n                // Obtener un token llamando al método \"getTokens\" importado\n\n                // Llamar al método \"getCamiones\" del servicio de camión, pasando el token como un parámetro\n                this.choferes = await ChoferService.getChoferes(this.token);\n                console.log(this.choferes);\n                this.requestComplete = true;\n            } catch (error) {\n                console.error(error);\n            }\n        }\n    },\n    // created(){\n    //      this.getCamiones()\n    // }\n\n}\n\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}