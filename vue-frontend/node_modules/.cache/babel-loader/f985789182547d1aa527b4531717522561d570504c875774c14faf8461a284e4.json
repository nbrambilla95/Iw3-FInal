{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"display\": \"flex\",\n    \"justify-content\": \"center\"\n  }\n};\nconst _hoisted_2 = {\n  key: 0,\n  for: \"input_username\"\n};\nconst _hoisted_3 = {\n  key: 2,\n  for: \"input_password\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  id: \"label_token\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Contenedor flex que centra todos los elementos hijo en él \"), _createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" Botón que llama a la función \\\"getTokens\\\" cuando se hace clic \"), _createElementVNode(\"button\", {\n    id: \"id_button_token\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.getTokens && $options.getTokens(...args)),\n    class: \"btn btn-primary\"\n  }, \"Solicitar Token\"), _createCommentVNode(\" Etiqueta y campo de entrada para el nombre de usuario \"), !$data.requestComplete ? (_openBlock(), _createElementBlock(\"label\", _hoisted_2, \"Usuario: \")) : _createCommentVNode(\"v-if\", true), !$data.requestComplete ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    key: 1,\n    type: \"text\",\n    id: \"input_username\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.username = $event)\n  }, null, 512 /* NEED_PATCH */)), [[_vModelText, $data.username]]) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Etiqueta y campo de entrada para la contraseña \"), !$data.requestComplete ? (_openBlock(), _createElementBlock(\"label\", _hoisted_3, \"Constrasenia: \")) : _createCommentVNode(\"v-if\", true), !$data.requestComplete ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    key: 3,\n    type: \"password\",\n    id: \"input_password\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.password = $event)\n  }, null, 512 /* NEED_PATCH */)), [[_vModelText, $data.password]]) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Etiqueta que muestra el token recibido \"), $data.requestComplete ? (_openBlock(), _createElementBlock(\"label\", _hoisted_4, _toDisplayString($data.token), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;EAESA,KAA+C,EAA/C;IAAA;IAAA;EAAA;AAA+C;;;EAKzCC,GAAG,EAAC;;;;EAIJA,GAAG,EAAC;;;;EAKRC,EAAE,EAAC;;;6DAfVC,kFAAkE,EAClEC,oBAYM,OAZNC,UAYM,GAXFF,uFAAqE,EACrEC,oBAAgG;IAAxFF,EAAE,EAAC,iBAAiB;IAAEI,OAAK,yCAAEC,iDAAS;IAAEC,KAAK,EAAC;KAAkB,iBAAe,GAEvFL,8EAA8D,GAC3BM,qBAAe,kBAAlDC,oBAAqE,SAArEC,UAAqE,EAAjB,WAAS,yCACIF,qBAAe,kCAAhFC,oBAAkF;;IAA3EE,IAAI,EAAC,MAAM;IAACV,EAAE,EAAC,gBAAgB;+DAAUO,cAAQ;kDAARA,cAAQ,yCAExDN,uEAAuD,GACpBM,qBAAe,kBAAlDC,oBAA0E,SAA1EG,UAA0E,EAAtB,gBAAc,yCACGJ,qBAAe,kCAApFC,oBAAsF;;IAA/EE,IAAI,EAAC,UAAU;IAACV,EAAE,EAAC,gBAAgB;+DAAUO,cAAQ;kDAARA,cAAQ,2CAGhEN,+DAA+C,EACjBM,qBAAe,kBAA7CC,oBAAkE,SAAlEI,UAAkE,mBAAhBL,WAAK","names":["style","for","id","_createCommentVNode","_createElementVNode","_hoisted_1","onClick","$options","class","$data","_createElementBlock","_hoisted_2","type","_hoisted_3","_hoisted_4"],"sourceRoot":"","sources":["/home/nicolas/Downloads/repos/Iw3-FInal/vue-frontend/src/components/Token.vue"],"sourcesContent":["<template>\n    <!-- Contenedor flex que centra todos los elementos hijo en él -->\n    <div style=\"display: flex; justify-content: center;\">\n        <!-- Botón que llama a la función \"getTokens\" cuando se hace clic -->\n        <button id=\"id_button_token\" @click=\"getTokens\" class=\"btn btn-primary\">Solicitar Token</button>\n\n        <!-- Etiqueta y campo de entrada para el nombre de usuario -->\n        <label for=\"input_username\" v-if=\"!requestComplete\">Usuario: </label>\n        <input type=\"text\" id=\"input_username\" v-model=\"username\" v-if=\"!requestComplete\">\n\n        <!-- Etiqueta y campo de entrada para la contraseña -->\n        <label for=\"input_password\" v-if=\"!requestComplete\">Constrasenia: </label>\n        <input type=\"password\" id=\"input_password\" v-model=\"password\" v-if=\"!requestComplete\">\n\n    </div>\n    <!-- Etiqueta que muestra el token recibido -->\n    <label id=\"label_token\" v-if=\"requestComplete\">{{ token }}</label>\n\n</template>\n\n<script>\n// Importar el servicio de token\nimport TokenService from '@/services/TokenService';\n\nexport default {\n    name: '',\n\n    // Propiedades de datos\n    data() {\n        return {\n            username: '',\n            password: '',\n            token: '',\n            requestComplete: false\n        }\n    },\n    // Funciones\n    methods: {\n        // Obtener un token de autenticación\n        getTokens() {\n            // Llamar al método \"getTokens\" del servicio de token, pasando el nombre de usuario y la contraseña como parámetros\n            TokenService.getTokens(this.username, this.password)\n                .then((token) => {\n                    // Asignar el token recibido a la propiedad \"token\"\n                    this.token = token;\n\n                    // Marcar la solicitud como completada\n                    this.requestComplete = true;\n                })\n                .catch((error) => {\n                    // Manejar cualquier error que pueda ocurrir\n                    console.error(error);\n                });\n        }\n    },\n\n    // created(){\n    // }\n\n}\n\n</script>\n\n<style>\n#id_button_token {\n    /* Convertir el botón en un contenedor flex y centrar todos los elementos hijo en él */\n    display: flex;\n    justify-content: center;\n}\n\n#label_token {\n    /* Convertir la etiqueta en un bloque y mostrarla debajo de otros elementos */\n    display: block;\n\n    /* Mover la etiqueta hacia abajo en la pantalla */\n    margin-top: 50px;\n    /* Encerrar la etiqueta en un recuadro y agregar el texto indicativo \"Token:\" */\n    border: 1px solid black;\n    content: \"Token:\";\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}