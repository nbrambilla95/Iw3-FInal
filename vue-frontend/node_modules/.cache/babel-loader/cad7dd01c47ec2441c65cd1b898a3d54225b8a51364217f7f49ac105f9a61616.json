{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"input_username\"\n}, \"Usuario: \", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"input_password\"\n}, \"Constrasenia: \", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  id: \"label_token\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(\" // Botón que llama a la función \\\"getTokens\\\" cuando se hace clic \"), _createElementVNode(\"button\", {\n    id: \"id_button_token\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.getTokens && $options.getTokens(...args))\n  }, \"Solicitar Token\"), _createTextVNode(\" // Etiqueta y campo de entrada para el nombre de usuario \"), _hoisted_1, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"input_username\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.username = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.username]]), _createTextVNode(\" // Etiqueta y campo de entrada para la contraseña \"), _hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"input_password\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.password = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]]), _createTextVNode(\" // Etiqueta que muestra el token recibido \"), _createElementVNode(\"label\", _hoisted_3, _toDisplayString($data.token), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCAKIA,oBAA6C;EAAtCC,GAAG,EAAC;AAAgB,GAAC,WAAS;gCAIrCD,oBAAkD;EAA3CC,GAAG,EAAC;AAAgB,GAAC,gBAAc;;EAInCC,EAAE,EAAC;AAAa;;mJAXvB,uBAAwE;IAAhEA,EAAE,EAAC,iBAAiB;IAAEC,OAAK,yCAAEC,iDAAS;KAAE,iBAAe,oBAAS,4DAGxE,aAA6C,kBAC7CJ,oBAA0D;IAAnDK,IAAI,EAAC,MAAM;IAACH,EAAE,EAAC,gBAAgB;+DAAUI,cAAQ;iDAARA,cAAQ,sBAAE,qDAG1D,aAAkD,kBAClDN,oBAA8D;IAAvDK,IAAI,EAAC,UAAU;IAACH,EAAE,EAAC,gBAAgB;+DAAUI,cAAQ;iDAARA,cAAQ,sBAAE,6CAG9D,uBAA2C,SAA3CC,UAA2C,mBAAhBD,WAAK","names":["_createElementVNode","for","id","onClick","$options","type","$data","_hoisted_3"],"sourceRoot":"","sources":["/home/nicolas/Downloads/repos/Iw3-FInal/vue-frontend/src/components/Token.vue"],"sourcesContent":["<template>\n    // Botón que llama a la función \"getTokens\" cuando se hace clic\n    <button id=\"id_button_token\" @click=\"getTokens\">Solicitar Token</button>\n\n    // Etiqueta y campo de entrada para el nombre de usuario\n    <label for=\"input_username\">Usuario: </label>\n    <input type=\"text\" id=\"input_username\" v-model=\"username\">\n\n    // Etiqueta y campo de entrada para la contraseña\n    <label for=\"input_password\">Constrasenia: </label>\n    <input type=\"password\" id=\"input_password\" v-model=\"password\">\n\n    // Etiqueta que muestra el token recibido\n    <label id=\"label_token\">{{ token }}</label>\n</template>\n\n<script>\n// Importar el servicio de token\nimport TokenService from '@/services/TokenService';\n\nexport default {\n    name: '',\n\n    // Propiedades de datos\n    data() {\n        return {\n            username: '',\n            password: '',\n            token: ''\n        }\n    },\n    // Funciones\n    methods: {\n        // Obtener un token de autenticación\n        getTokens() {\n            // Llamar al método \"getTokens\" del servicio de token, pasando el nombre de usuario y la contraseña como parámetros\n            TokenService.getTokens(this.username, this.password)\n                .then((token) => {\n                    // Asignar el token recibido a la propiedad \"token\"\n                    this.token = token;\n                })\n                .catch((error) => {\n                    // Manejar cualquier error que pueda ocurrir\n                    console.error(error);\n                });\n        }\n    },\n\n    // created(){\n    // }\n\n}\n\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}